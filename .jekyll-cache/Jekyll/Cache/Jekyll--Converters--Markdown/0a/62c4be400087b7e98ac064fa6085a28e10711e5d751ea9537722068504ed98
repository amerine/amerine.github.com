I"É'<p>I enjoy using <a href="http://opensolaris.org">OpenSolaris</a> when I can, and Iâ€™ve been using it for a couple small Ruby on Rails deployments. Iâ€™ve received a few questions recently about deploying Ruby on Rails app on <a href="http://opensolaris.org">OpenSolaris</a>, so to kill a few â€˜birdsâ€™ with one stone. Iâ€™m throwing this post together so that I can just point them here and let them run with it.</p>

<p>Sun has an easy to install meta-package called <code class="highlighter-rouge">amp</code> that includes Apache 2.2, Apache 2.2 DTrace probes, MySQL Server 5.1 &amp; PHP. If youâ€™ve never used Solaris/OpenSolaris before the <code class="highlighter-rouge">pfexec</code> command will seem foreign to you. Donâ€™t let it worry you its part of the Solaris RBAC (Role Based Access Control) by default the non-root user you created during the install has the <code class="highlighter-rouge">root</code> user role and can execute commands as root if you use <code class="highlighter-rouge">pfexec</code>.</p>

<p>Iâ€™m assuming youâ€™re starting from scratch on an OpenSolaris 2009.06 server with nothing extra installed. I also assume youâ€™ve had some experience with a Unix/Linux variant.</p>

<h2 id="basics">Basics</h2>
<p>We want to install some of the GNU stack including <code class="highlighter-rouge">gmake</code>, <code class="highlighter-rouge">gcc</code> and git + subversion. Weâ€™re going to install git from source to be sure weâ€™re on the latest release.</p>

<h3 id="gmake-gcc-subversion-and-curl">gmake, gcc, subversion and curl</h3>
<p>Commands:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">  $</span><span class="w"> </span>pfexec pkg <span class="nb">install </span>SUNWgmake
<span class="gp">  $</span><span class="w"> </span>pfexec pkg <span class="nb">install </span>SUNWgcc
<span class="gp">  $</span><span class="w"> </span>pfexec pkg <span class="nb">install </span>SUNWsvn
<span class="gp">  $</span><span class="w"> </span>pfexec pkg <span class="nb">install </span>SUNWcurl</code></pre></figure>

<h3 id="git">git</h3>
<p><code class="highlighter-rouge">curl</code> is required to build <code class="highlighter-rouge">git</code> donâ€™t skip installing <code class="highlighter-rouge">SUNWcurl</code> from above.</p>

<p>Note: There seems to be an issue with building versions of git newer than 1.6.0.6 on OpenSolaris 2009.06. Iâ€™ll figure out why but in the meantime Iâ€™ve provided instructions for installing git 1.6.0.6. Please verify that <code class="highlighter-rouge">/usr/local/bin</code> is in your <code class="highlighter-rouge">$PATH</code>.</p>

<p>Commands:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="gp">  $</span><span class="w"> </span>pfexec <span class="nb">mkdir</span> <span class="nt">-p</span> /opt/src
<span class="gp">  $</span><span class="w"> </span>pfexec <span class="nb">chmod </span>777 /opt/src
<span class="gp">  $</span><span class="w"> </span><span class="nb">cd</span> /opt/src
<span class="gp">  $</span><span class="w"> </span>wget http://kernel.org/pub/software/scm/git/git-1.6.0.6.tar.gz
<span class="gp">  $</span><span class="w"> </span><span class="nb">tar </span>xzf git-1.6.0.6.tar.gz
<span class="gp">  $</span><span class="w"> </span>git-1.6.0.6
<span class="gp">  $</span><span class="w"> </span>./configure
<span class="gp">  $</span><span class="w"> </span>gmake
<span class="gp">  $</span><span class="w"> </span>pfexec make <span class="nb">install</span>
<span class="gp">  $</span><span class="w"> </span>git <span class="nt">--version</span></code></pre></figure>

<h2 id="apache-stack-amp">Apache Stack (AMP)</h2>
<p>Like I noted above, OpenSolaris has a meta-package we can install that will take care of most of this. It will install the following packages for us:</p>

<ul>
  <li>MySQL Server 5.1</li>
  <li>Apache 2.2.30</li>
  <li>PHP 5.2.9</li>
</ul>

<p>Commands:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  pfexec pkg <span class="nb">install </span>amp</code></pre></figure>

<h3 id="enable-apache--mysql-services">Enable Apache &amp; MySQL Services</h3>
<p>By default the Apache and MySQL services are not enabled. To turn them on run the following commands:</p>

<p>Apache 2:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  pfexec svcadm <span class="nb">enable </span>http:apache22</code></pre></figure>

<p>MySQL</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  pfexec svcadm <span class="nb">enable </span>mysql</code></pre></figure>

<h2 id="ruby--ruby-on-rails">Ruby &amp; Ruby on Rails</h2>
<p>First we are going to use the Sun provided Ruby 1.8.7 package that also installs rubygems. Then we will update rubygems, install the gemcutter gem, add http://gems.github.com as a gem source (for legacy purposes), install the rails gems and finally modify our path to include the gem binaries.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  pfexec pkg <span class="nb">install </span>SUNWruby18
  pfexec gem update <span class="nt">--system</span>
  pfexec gem <span class="nb">install </span>gemcutter
  gem tumble
  gem sources <span class="nt">-a</span> http://gems.github.com
  pfexec gem <span class="nb">install </span>rails
  <span class="nb">echo</span> <span class="s1">'export PATH=/usr/ruby/1.8/bin:$PATH'</span> <span class="o">&gt;&gt;</span> ~/.profile
  <span class="nb">echo</span> <span class="s1">'export PATH=/var/ruby/1.8/gem_home/bin:$PATH'</span> <span class="o">&gt;&gt;</span> ~/.profile</code></pre></figure>

<p>(Note: Modifying .profile requires you to re-login to the machine, as itâ€™s only read during that point. If you like you can add that same line to your .bashrc file)</p>

<h3 id="install-database-gems">Install Database Gems</h3>
<p>Mysql:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  pfexec gem <span class="nb">install </span>mysql <span class="nt">--</span> <span class="nt">--with-mysql-dir</span><span class="o">=</span>/usr/mysql/5.1</code></pre></figure>

<p>sqlite3</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  pfexec gem <span class="nb">install </span>sqlite3-ruby</code></pre></figure>

<h2 id="passenger-installation">Passenger Installation</h2>
<p>We need to install fastthread and passenger, then configure apache to use it. Weâ€™re going to install passenger from source as it fixes a bug with the use of PTHREAD_STACK_MIN (See <a href="http://code.google.com/p/phusion-passenger/issues/detail?id=369">here</a>) This is fixed in passenger 2.2.6 and I will update this when that is released.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  pfexec gem <span class="nb">install </span>fastthread
  <span class="nb">cd</span> /opt/src
  git clone git://github.com/FooBarWidget/passenger.git
  <span class="nb">cd </span>passenger
  pfexec ./bin/passenger-install-apache2-module</code></pre></figure>

<h3 id="apache-configuration">Apache Configuration</h3>
<p>Weâ€™re going to keep the passenger configuration in itâ€™s own file to keep the httpd.conf clean.</p>

<p>Create the file:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  <span class="nb">touch</span> /etc/apache2/2.2/conf.d/passenger.conf</code></pre></figure>

<p>Paste the lines from the passenger-install-apache2-module command in that file. My file contains the following:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  LoadModule passenger_module /opt/src/passenger/ext/apache2/mod_passenger.so
  PassengerRoot /opt/src/passenger
  PassengerRuby /usr/ruby/1.8/bin/ruby</code></pre></figure>

<h2 id="lets-test">Letâ€™s Test</h2>
<p>Lets create a little rails app to verify that rails and passenger</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  pfexec <span class="nb">mkdir</span> <span class="nt">-p</span> /data/apps
  pfexec <span class="nb">chown</span> <span class="nt">-R</span> mturner:staff /data/apps
  <span class="nb">cd</span> /data/apps
  rails <span class="nb">test
  cd test</span>
  ./script/generate controller helloworld index
  pfexec <span class="nb">chown</span> <span class="nt">-R</span> webservd:webservd <span class="nb">test</span></code></pre></figure>

<p>Lets add a vhost config for apache.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  pfexec vim /etc/apache2/2.2/conf.d/test-site.conf</code></pre></figure>

<p>Here is the contents of my file:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">		&lt;VirtualHost <span class="k">*</span>:80&gt;
		     ServerName test-site.com
		     DocumentRoot /data/apps/test/public

		     &lt;Directory /data/apps/test&gt;
		      Options +FollowSymLinks <span class="nt">-SymLinksIfOwnerMatch</span> +MultiViews <span class="nt">-Indexes</span> <span class="nt">-ExecCGI</span>
		      AllowOverride ALL
		      Order allow,deny
		      Allow from all
		     &lt;/Directory&gt;

		&lt;/VirtualHost&gt;</code></pre></figure>

<p>Add <code class="highlighter-rouge">127.0.0.1 test-site.com</code> to <code class="highlighter-rouge">/etc/hosts</code></p>

<p>Restart Apache</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  pfexec svcadm restart http:apache22</code></pre></figure>

<p>Test the site in apache and you see the following:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="no">Helloworld</span><span class="c1">#index</span>

  <span class="no">Find</span> <span class="n">me</span> <span class="k">in</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">helloworld</span><span class="o">/</span><span class="n">index</span><span class="p">.</span><span class="nf">html</span><span class="p">.</span><span class="nf">erb</span></code></pre></figure>

<p>It Works!!</p>
:ET